struct Node
{
	int value;
	struct Node *next;
}*first=NULL;

struct Node *add_to_list(struct Node *head, int n)
{
	struct Node *new_node = malloc(sizeof(struct Node));

	if (new_node == NULL) {
		printf("Allocation failed.");
		exit(EXIT_FAILURE);
	}

	new_node->value = n;
	new_node->next = head;

	return new_node;
}

void display(struct Node *head)
{
	for (; head != NULL; head = head->next)
		printf("%d ", head->value);
	printf("\n");
}

struct Node *delete(struct Node *head, int n)
{
	struct Node *cur = head, *prev = NULL;

	for (; cur != NULL && cur->value != n; prev = cur, cur = cur->next);

	if (cur == NULL) {
		printf("\nNumber does not found.\n");
		return head;
	}
	if (prev == NULL)
		head = head->next;
	else
		prev->next = cur->next;

	free(cur);

	return head;
}

int count_occurences(struct Node *head, int n)
{
	int count = 0;
	
	for (; head != NULL; head = head->next)
	{
		if (head->value == n)
			count++;
	}

	return count;
}

struct Node *find_last(struct Node *list, int n)
{
	struct Node *p = NULL;

	for (; list != NULL; list = list->next)
		if (list->value == n)
			p = list;

	return p;
}

int main()
{
	first = add_to_list(first, 6);
	first = add_to_list(first, 1);
	first = add_to_list(first, 4);
	first = add_to_list(first, 6);
	first = add_to_list(first, 8);
	first = add_to_list(first, 2);
	first = add_to_list(first, 6);
	

	display(first);

	int num;

	printf("Enter a number to delete: ");
	scanf("%d", &num);

	first=delete(first, num);

	display(first);

	printf("Enter a number to calculate occurence: ");
	scanf("%d", &num);

	printf("%d occurences\n", count_occurences(first, num));

	getch();
}
