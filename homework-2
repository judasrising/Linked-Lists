# include<stdio.h>
# include<stdlib.h>
#include<time.h>
#define SIZE 10

struct Node
{
	int data;
	struct Node *next;
}*first = NULL;

void generate_linked_list(struct Node **head_ref, int new_data, int choice)
{
	struct Node *new_node = malloc(sizeof(struct Node));  // Allocate memory for the node.

	if (new_node == NULL)       // Check whether the malloc() is successful or not.
	{
		printf("Allocation failed. Exiting the program...");
		exit(EXIT_FAILURE);
	}


	/* Insert the node if the allocation is successful */

	if (choice == 0)  // insert at the beginning of the list.
	{
		new_node->data = new_data;
		new_node->next = *head_ref;
		*head_ref = new_node;
		return;
	}

	if (choice == 1) // insert at the end of the list.
	{
		struct Node *last = *head_ref;

		new_node->data = new_data;
		new_node->next = NULL;

		if (*head_ref == NULL)   // if this is true the list is empty.
								 // make the new node as head.
		{
			*head_ref = new_node;
			return;
		}

		for (; last->next != NULL; last = last->next);  // go to the last node

		last->next = new_node;  // make the new_node as the last node of the list.

	}
}

void displayList(struct Node *node)  // display the list.
{
	for (; node != NULL; node = node->next)
		printf("%d ", node->data);
	printf("\n");
}

int calculate_square(int n)  // function to calculate square of a number
{
	return n * n;
}

int computeSum(int(*fp)(int), struct Node **head_ref)
{
	int sum = 0;
	struct Node *first = *head_ref;
	for (; first != NULL; first = first->next)
		sum += fp(first->data);

	return sum;
}

int main()
{
	/* insert random numbers within the list. */
	srand(time(NULL));
	for (int i = 0; i < SIZE; i++)
		generate_linked_list(&first, 1 + rand() % +100, 0 + rand() % +2);

	displayList(first);

	printf("Summation of the elements' square = %d", computeSum(calculate_square, &first));

	getch();
}
